resource "proxmox_node_virtual_machine" "vm" {
  id              = (var.node_index) * 100 + var.index + 40
  name            = var.name
  node            = var.node
  memory          = var.memory
  cpu_cores       = var.cpus
  cpu_sockets     = 1
  cpu_type        = "host"
  guest_agent     = true
  scsi_controller = "virtio-scsi-single"
  reboot          = true

  serial {
    id   = "serial0"
    type = "socket"
  }

  ide {
    id      = "ide0"
    content = "local:iso/talos-v1.9.5-amd64.iso"
  }

  scsi {
    id      = "scsi0"
    size_gb = var.disk_size
    storage = "vmdata"
  }

  network {
    id       = "net0"
    bridge   = "vmbr0"
    tag      = var.vlan_tag
    firewall = true
  }
}

resource "unifi_user" "vm_ip" {
  mac  = tolist(proxmox_node_virtual_machine.vm.network)[0].mac_address
  name = var.name
  note = "IP for VM: ${var.name} (Generated by TF)"

  fixed_ip   = "10.1.21.1${var.node_index + 1}${var.index + 1}"
  network_id = var.network_id
}

output "vm_ip" {
  value = unifi_user.vm_ip.fixed_ip
}

data "talos_machine_configuration" "this" {
  cluster_name     = var.talos_cluster_name
  machine_type     = var.talos_machine_type
  cluster_endpoint = var.talos_cluster_endpoint == "" ? "https://${unifi_user.vm_ip.fixed_ip}:6443" : var.talos_cluster_endpoint
  machine_secrets  = var.talos_machine_secrets
}

resource "talos_machine_configuration_apply" "this" {
  client_configuration        = var.talos_client_configuration
  machine_configuration_input = data.talos_machine_configuration.this.machine_configuration
  node                        = unifi_user.vm_ip.fixed_ip
  config_patches = [
    yamlencode({
      machine = {
        install = {
          image = "factory.talos.dev/installer/ce4c980550dd2ab1b17bbf2b08801c7eb59418eafe8f279833297925d67c7515:${var.talos_version}"
        }
      }
    })
  ]
}

resource "talos_machine_bootstrap" "this" {
  count = var.talos_cluster_endpoint == "" ? 1 : 0
  depends_on = [
    talos_machine_configuration_apply.this
  ]
  node                 = unifi_user.vm_ip.fixed_ip
  client_configuration = var.talos_client_configuration
  lifecycle {
    # The AMI ID must refer to an existing AMI that has the tag "nomad-server".
    precondition {
      condition     = var.talos_cluster_endpoint != "" || var.talos_machine_type == "controlplane"
      error_message = "If the cluster endpoint is not set, the machine type must be controlplane."
    }
  }
}
